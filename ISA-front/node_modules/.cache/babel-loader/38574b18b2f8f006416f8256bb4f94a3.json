{"ast":null,"code":"'use strict';\n\nvar _require = require('./errors'),\n    NoVideoInputDevicesError = _require.NoVideoInputDevicesError;\n\nfunction defaultDeviceIdChooser(filteredDevices, videoDevices, facingMode) {\n  if (filteredDevices.length > 0) {\n    return filteredDevices[0].deviceId;\n  }\n\n  if (videoDevices.length == 1 || facingMode == 'user') {\n    return videoDevices[0].deviceId;\n  }\n\n  return videoDevices[1].deviceId;\n}\n\nvar getFacingModePattern = function getFacingModePattern(facingMode) {\n  return facingMode == 'environment' ? /rear|back|environment/ig : /front|user|face/ig;\n};\n\nfunction getDeviceId(facingMode) {\n  var chooseDeviceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDeviceIdChooser; // Get manual deviceId from available devices.\n\n  return new Promise(function (resolve, reject) {\n    var enumerateDevices = void 0;\n\n    try {\n      enumerateDevices = navigator.mediaDevices.enumerateDevices();\n    } catch (err) {\n      reject(new NoVideoInputDevicesError());\n    }\n\n    enumerateDevices.then(function (devices) {\n      // Filter out non-videoinputs\n      var videoDevices = devices.filter(function (device) {\n        return device.kind == 'videoinput';\n      });\n\n      if (videoDevices.length < 1) {\n        reject(new NoVideoInputDevicesError());\n        return;\n      }\n\n      var pattern = getFacingModePattern(facingMode); // Filter out video devices without the pattern\n\n      var filteredDevices = videoDevices.filter(function (_ref) {\n        var label = _ref.label;\n        return pattern.test(label);\n      });\n      resolve(chooseDeviceId(filteredDevices, videoDevices, facingMode));\n    });\n  });\n}\n\nmodule.exports = {\n  getDeviceId: getDeviceId,\n  getFacingModePattern: getFacingModePattern\n};","map":{"version":3,"sources":["C:/Users/stefan/Desktop/ISA-projekat/ISA-projekat/ISA-front/node_modules/react-qr-reader/lib/getDeviceId.js"],"names":["_require","require","NoVideoInputDevicesError","defaultDeviceIdChooser","filteredDevices","videoDevices","facingMode","length","deviceId","getFacingModePattern","getDeviceId","chooseDeviceId","arguments","undefined","Promise","resolve","reject","enumerateDevices","navigator","mediaDevices","err","then","devices","filter","device","kind","pattern","_ref","label","test","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;AAAA,IACIC,wBAAwB,GAAGF,QAAQ,CAACE,wBADxC;;AAGA,SAASC,sBAAT,CAAgCC,eAAhC,EAAiDC,YAAjD,EAA+DC,UAA/D,EAA2E;AACzE,MAAIF,eAAe,CAACG,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,WAAOH,eAAe,CAAC,CAAD,CAAf,CAAmBI,QAA1B;AACD;;AACD,MAAIH,YAAY,CAACE,MAAb,IAAuB,CAAvB,IAA4BD,UAAU,IAAI,MAA9C,EAAsD;AACpD,WAAOD,YAAY,CAAC,CAAD,CAAZ,CAAgBG,QAAvB;AACD;;AACD,SAAOH,YAAY,CAAC,CAAD,CAAZ,CAAgBG,QAAvB;AACD;;AAED,IAAIC,oBAAoB,GAAG,SAASA,oBAAT,CAA8BH,UAA9B,EAA0C;AACnE,SAAOA,UAAU,IAAI,aAAd,GAA8B,yBAA9B,GAA0D,mBAAjE;AACD,CAFD;;AAIA,SAASI,WAAT,CAAqBJ,UAArB,EAAiC;AAC/B,MAAIK,cAAc,GAAGC,SAAS,CAACL,MAAV,GAAmB,CAAnB,IAAwBK,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoET,sBAAzF,CAD+B,CAG/B;;AACA,SAAO,IAAIW,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,QAAIC,gBAAgB,GAAG,KAAK,CAA5B;;AACA,QAAI;AACFA,MAAAA,gBAAgB,GAAGC,SAAS,CAACC,YAAV,CAAuBF,gBAAvB,EAAnB;AACD,KAFD,CAEE,OAAOG,GAAP,EAAY;AACZJ,MAAAA,MAAM,CAAC,IAAId,wBAAJ,EAAD,CAAN;AACD;;AACDe,IAAAA,gBAAgB,CAACI,IAAjB,CAAsB,UAAUC,OAAV,EAAmB;AACvC;AACA,UAAIjB,YAAY,GAAGiB,OAAO,CAACC,MAAR,CAAe,UAAUC,MAAV,EAAkB;AAClD,eAAOA,MAAM,CAACC,IAAP,IAAe,YAAtB;AACD,OAFkB,CAAnB;;AAIA,UAAIpB,YAAY,CAACE,MAAb,GAAsB,CAA1B,EAA6B;AAC3BS,QAAAA,MAAM,CAAC,IAAId,wBAAJ,EAAD,CAAN;AACA;AACD;;AAED,UAAIwB,OAAO,GAAGjB,oBAAoB,CAACH,UAAD,CAAlC,CAXuC,CAavC;;AACA,UAAIF,eAAe,GAAGC,YAAY,CAACkB,MAAb,CAAoB,UAAUI,IAAV,EAAgB;AACxD,YAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AACA,eAAOF,OAAO,CAACG,IAAR,CAAaD,KAAb,CAAP;AACD,OAHqB,CAAtB;AAKAb,MAAAA,OAAO,CAACJ,cAAc,CAACP,eAAD,EAAkBC,YAAlB,EAAgCC,UAAhC,CAAf,CAAP;AACD,KApBD;AAqBD,GA5BM,CAAP;AA6BD;;AAEDwB,MAAM,CAACC,OAAP,GAAiB;AAAErB,EAAAA,WAAW,EAAEA,WAAf;AAA4BD,EAAAA,oBAAoB,EAAEA;AAAlD,CAAjB","sourcesContent":["'use strict';\r\n\r\nvar _require = require('./errors'),\r\n    NoVideoInputDevicesError = _require.NoVideoInputDevicesError;\r\n\r\nfunction defaultDeviceIdChooser(filteredDevices, videoDevices, facingMode) {\r\n  if (filteredDevices.length > 0) {\r\n    return filteredDevices[0].deviceId;\r\n  }\r\n  if (videoDevices.length == 1 || facingMode == 'user') {\r\n    return videoDevices[0].deviceId;\r\n  }\r\n  return videoDevices[1].deviceId;\r\n}\r\n\r\nvar getFacingModePattern = function getFacingModePattern(facingMode) {\r\n  return facingMode == 'environment' ? /rear|back|environment/ig : /front|user|face/ig;\r\n};\r\n\r\nfunction getDeviceId(facingMode) {\r\n  var chooseDeviceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDeviceIdChooser;\r\n\r\n  // Get manual deviceId from available devices.\r\n  return new Promise(function (resolve, reject) {\r\n    var enumerateDevices = void 0;\r\n    try {\r\n      enumerateDevices = navigator.mediaDevices.enumerateDevices();\r\n    } catch (err) {\r\n      reject(new NoVideoInputDevicesError());\r\n    }\r\n    enumerateDevices.then(function (devices) {\r\n      // Filter out non-videoinputs\r\n      var videoDevices = devices.filter(function (device) {\r\n        return device.kind == 'videoinput';\r\n      });\r\n\r\n      if (videoDevices.length < 1) {\r\n        reject(new NoVideoInputDevicesError());\r\n        return;\r\n      }\r\n\r\n      var pattern = getFacingModePattern(facingMode);\r\n\r\n      // Filter out video devices without the pattern\r\n      var filteredDevices = videoDevices.filter(function (_ref) {\r\n        var label = _ref.label;\r\n        return pattern.test(label);\r\n      });\r\n\r\n      resolve(chooseDeviceId(filteredDevices, videoDevices, facingMode));\r\n    });\r\n  });\r\n}\r\n\r\nmodule.exports = { getDeviceId: getDeviceId, getFacingModePattern: getFacingModePattern };"]},"metadata":{},"sourceType":"script"}