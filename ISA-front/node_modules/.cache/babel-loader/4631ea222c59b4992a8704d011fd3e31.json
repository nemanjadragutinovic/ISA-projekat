{"ast":null,"code":"var _jsxFileName = \"E:\\\\aca\\\\isa\\\\nasa-isa\\\\ISA-projekat\\\\ISA-front\\\\src\\\\Components\\\\SupplierPages\\\\OrdersPageForPhAdmin.js\";\nimport React, { Component } from \"react\";\nimport Header from \"../../Components/Header\";\nimport Axios from \"axios\";\nimport GetAuthorisation from \"../../Funciton/GetAuthorisation\";\nimport orderImage from \"../../Images/orderImage.png\";\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport { confirmAlert } from 'react-confirm-alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8080\";\n\nclass OrdersPageForPhAdmin extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orders: [],\n      pharmacyId: '',\n      hiddenSuccessAlert: true,\n      successHeader: \"\",\n      successMessage: \"\",\n      hiddenFailAlert: true,\n      failHeader: \"\",\n      failMessage: \"\",\n      offers: [],\n      showOffersModal: false,\n      selectedOrder: '',\n      drugsToAdd: [],\n      addedDrugs: [],\n      showEditOrder: false,\n      drugs: [],\n      showingSorted: false,\n      drugsFromOrder: [],\n      drugsForAdd: [],\n      orderToEdit: ''\n    };\n\n    this.removeOrderClick = id => {\n      /*    confirmAlert({\r\n              message: 'Are you sure to remove order?',\r\n              buttons: [\r\n                {\r\n                  label: 'Yes',\r\n                  onClick: () => {\r\n                      let EntityIdDTO = {\r\n                          id: id \r\n                      };\r\n                        Axios\r\n                      .put(BASE_URL + \"/api/order/remove-order-from-pharmacy\", EntityIdDTO, {\r\n                          validateStatus: () => true,\r\n                          headers: { Authorization: getAuthHeader() },\r\n                      }).then((res) =>{\r\n                          if (res.status === 200) {\r\n                              this.setState({\r\n                                  hiddenSuccessAlert: false,\r\n                                  hiddenFailAlert:true,\r\n                                  successHeader: \"Success\",\r\n                                  successMessage: \"You successfully delete order.\",\r\n                              })\r\n                              this.updateOrders();\r\n                          }else if(res.status === 400)\r\n                          {\r\n                              this.setState({\r\n                                  hiddenSuccessAlert: true,\r\n                                  hiddenFailAlert:false,\r\n                                  failHeader: \"Unsuccess\", \r\n                                  failMessage: \"Not possible to remove order because have offers\"\r\n                              })\r\n                          }else if(res.status === 500)\r\n                          {\r\n                              this.setState({\r\n                                  hiddenSuccessAlert: true,\r\n                                  hiddenFailAlert:false,\r\n                                  failHeader: \"Unsuccess\", \r\n                                  failMessage: \"We have some problem. Try later.\"\r\n                              })\r\n                          }\r\n                          \r\n                      }).catch(() => {\r\n                        });\r\n                  }\r\n                },\r\n                {\r\n                  label: 'No',\r\n                  onClick: () => {\r\n                      \r\n                  }\r\n                }\r\n              ]\r\n          });*/\n    };\n\n    this.updateOrders = () => {\n      /*  Axios\r\n        .get(BASE_URL + \"/api/order/find-orders-for-pharmacy?pharmacyId=\"+ this.state.pharmacyId, {\r\n      headers: { Authorization: getAuthHeader() },\r\n      }).then((res) =>{\r\n            this.setState({orders : res.data});\r\n            console.log(res.data);\r\n        }).catch((err) => {console.log(err);});*/\n    };\n\n    this.handleCloseAlertSuccess = () => {\n      this.setState({\n        hiddenSuccessAlert: true\n      });\n    };\n\n    this.handleCloseAlertFail = () => {\n      this.setState({\n        hiddenFailAlert: true\n      });\n    };\n\n    this.handleCloseOffersModal = () => {\n      this.setState({\n        showOffersModal: false\n      });\n    };\n\n    this.onViewOrdersClick = (id, num) => {\n      /*  if(num===0){\r\n            this.setState({\r\n                hiddenSuccessAlert: true,\r\n                hiddenFailAlert:false,\r\n                failHeader: \"Unsuccess\", \r\n                failMessage: \"There are currently no offers\"\r\n            })\r\n        }else{\r\n            Axios\r\n            .get(BASE_URL + \"/api/offer/offers-for-order?orderId=\"+ id, {\r\n                validateStatus: () => true,\r\n                headers: { Authorization: getAuthHeader() },\r\n            }).then((res) =>{\r\n                if(res.status ===200){\r\n                    this.setState({\r\n                        offers : res.data,\r\n                        showOffersModal:true,\r\n                        selectedOrder:id\r\n                    });\r\n                }\r\n                if(res.status === 400)\r\n                {\r\n                    this.setState({\r\n                        hiddenSuccessAlert: true,\r\n                        hiddenFailAlert:false,\r\n                        failHeader: \"Unsuccess\", \r\n                        failMessage: \"The order has been processed\"\r\n                    })\r\n                }else if(res.status === 500)\r\n                {\r\n                    this.setState({\r\n                        hiddenSuccessAlert: true,\r\n                        hiddenFailAlert:false,\r\n                        failHeader: \"Unsuccess\", \r\n                        failMessage: \"We have some problem. Try later.\"\r\n                    })\r\n                }\r\n                console.log(res.data);\r\n            }).catch((err) => {console.log(err);});    \r\n        }*/\n    };\n\n    this.addItem = item => {\n      this.setState({\n        drugsFromOrder: [...this.state.drugsFromOrder, item]\n      });\n    };\n\n    this.handleRemoveFromDrugToAdd = drug => {\n      this.removePeople(drug);\n    };\n\n    this.handleAddToAddedDrugs = drug => {\n      this.addItem(drug);\n    };\n\n    this.onEditOrderClick = (order, num) => {\n      /*    if(num!==0){\r\n              this.setState({\r\n                  hiddenSuccessAlert: true,\r\n                  hiddenFailAlert:false,\r\n                  failHeader: \"Unsuccess\", \r\n                  failMessage: \"Not possible to remove order because have offers\"\r\n              })\r\n          }else{\r\n              Axios\r\n              .get(BASE_URL + \"/api/order/find-drugs-by-order?orderId=\"+ order.Id, {\r\n                  headers: { Authorization: getAuthHeader() },\r\n              }).then((res) =>{\r\n                  this.setState({drugsFromOrder : res.data});\r\n                  console.log(res.data);\r\n              }).catch((err) => {console.log(err);});\r\n      \r\n              Axios\r\n              .get(BASE_URL + \"/api/order/find-drugs-by-order-to-add?orderId=\"+ order.Id, {\r\n                  headers: { Authorization: getAuthHeader() },\r\n              }).then((res) =>{\r\n                  this.setState({drugsForAdd : res.data});\r\n                  console.log(res.data);\r\n              }).catch((err) => {console.log(err);});\r\n      \r\n      \r\n              this.setState({\r\n                  orderToEdit: order.Id,\r\n                  showEditOrder:true,\r\n              })\r\n          }\r\n      }\r\n        handleAcceptOffer = () =>{\r\n          this.setState({\r\n              hiddenSuccessAlert: false,\r\n              hiddenFailAlert:true,\r\n              successHeader: \"Success\",\r\n              successMessage: \"You successfully accept offer.\",\r\n              showOffersModal:false\r\n          })\r\n          this.updateOrders();\r\n      }\r\n        handleResetFilter = () =>{\r\n          Axios\r\n          .get(BASE_URL + \"/api/order/find-orders-for-pharmacy?pharmacyId=\"+ this.state.pharmacyId, {\r\n      headers: { Authorization: getAuthHeader() },\r\n      }).then((res) =>{\r\n              this.setState({orders : res.data,showingSorted:false});\r\n              console.log(res.data);\r\n          }).catch((err) => {console.log(err);});\r\n      }\r\n        handleFilterOrderPerCreated = () =>{\r\n          Axios\r\n          .get(BASE_URL + \"/api/order/find-created-orders-for-pharmacy?pharmacyId=\"+ this.state.pharmacyId, {\r\n      headers: { Authorization: getAuthHeader() },\r\n      }).then((res) =>{\r\n              this.setState({orders : res.data,showingSorted:true});\r\n              console.log(res.data);\r\n          }).catch((err) => {console.log(err);});\r\n      }\r\n        handleFilterOrderPerProccessed = () =>{\r\n          Axios\r\n          .get(BASE_URL + \"/api/order/find-processed-orders-for-pharmacy?pharmacyId=\"+ this.state.pharmacyId, {\r\n      headers: { Authorization: getAuthHeader() },\r\n      }).then((res) =>{\r\n              this.setState({orders : res.data,showingSorted:true});\r\n              console.log(res.data);\r\n          }).catch((err) => {console.log(err);});*/\n    };\n\n    this.handleEditOrderModalClose = () => {\n      this.setState({\n        showEditOrder: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    let pharmacyId = localStorage.getItem(\"keyPharmacyId\");\n    this.setState({\n      pharmacyId: pharmacyId\n    });\n    Axios.get(API_URL + \"/order/getAllOrdersForPharmacy/\" + localStorage.getItem(\"keyPharmacyId\"), {\n      headers: {\n        Authorization: GetAuthorisation()\n      }\n    }).then(res => {\n      console.log(res.data);\n      this.setState({\n        orders: res.data\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  removePeople(e) {\n    var array = [...this.state.drugsForAdd]; // make a separate copy of the array\n\n    var index = array.indexOf(e);\n\n    if (index !== -1) {\n      array.splice(index, 1);\n      this.setState({\n        drugsForAdd: array\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        style: {\n          marginTop: \"2%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \" text-center mb-0 mt-2 text-uppercase\",\n          children: \"Orders \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-hover\",\n          style: {\n            width: \"100%\",\n            marginTop: \"3rem\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: this.state.orders.map(order => /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"rounded\",\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                width: \"190em\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"img-fluid\",\n                  src: orderImage,\n                  width: \"150em\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 300,\n                  columnNumber: 11\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \"Date : \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 304,\n                    columnNumber: 12\n                  }, this), \" \", new Date(order.EntityDTO.dateTo).toLocaleTimeString(\"en-US\", {\n                    day: \"2-digit\",\n                    month: \"2-digit\",\n                    year: \"numeric\",\n                    hour: \"2-digit\",\n                    minute: \"2-digit\"\n                  })]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 303,\n                  columnNumber: 11\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \"Creator: \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 315,\n                    columnNumber: 12\n                  }, this), \" \", order.EntityDTO.creator]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 314,\n                  columnNumber: 11\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \"Offers: \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 319,\n                    columnNumber: 12\n                  }, this), \" \", order.EntityDTO.offersCount]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 318,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \"Status: \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 323,\n                    columnNumber: 12\n                  }, this), \" \", order.EntityDTO.orderStatus]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"align-middle\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mt-2\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    onClick: () => this.handleOfferClick(order),\n                    className: \"btn btn-outline-secondary\",\n                    children: \"Create an offer\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 329,\n                    columnNumber: 12\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 328,\n                  columnNumber: 11\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 10\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 9\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default OrdersPageForPhAdmin;","map":{"version":3,"sources":["E:/aca/isa/nasa-isa/ISA-projekat/ISA-front/src/Components/SupplierPages/OrdersPageForPhAdmin.js"],"names":["React","Component","Header","Axios","GetAuthorisation","orderImage","confirmAlert","API_URL","OrdersPageForPhAdmin","state","orders","pharmacyId","hiddenSuccessAlert","successHeader","successMessage","hiddenFailAlert","failHeader","failMessage","offers","showOffersModal","selectedOrder","drugsToAdd","addedDrugs","showEditOrder","drugs","showingSorted","drugsFromOrder","drugsForAdd","orderToEdit","removeOrderClick","id","updateOrders","handleCloseAlertSuccess","setState","handleCloseAlertFail","handleCloseOffersModal","onViewOrdersClick","num","addItem","item","handleRemoveFromDrugToAdd","drug","removePeople","handleAddToAddedDrugs","onEditOrderClick","order","handleEditOrderModalClose","componentDidMount","localStorage","getItem","get","headers","Authorization","then","res","console","log","data","catch","err","e","array","index","indexOf","splice","render","marginTop","width","map","Date","EntityDTO","dateTo","toLocaleTimeString","day","month","year","hour","minute","creator","offersCount","orderStatus","handleOfferClick"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Header from \"../../Components/Header\";\r\nimport Axios from \"axios\";\r\nimport GetAuthorisation from \"../../Funciton/GetAuthorisation\";\r\nimport orderImage from \"../../Images/orderImage.png\";\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\nimport { confirmAlert } from 'react-confirm-alert'; \r\nconst API_URL = \"http://localhost:8080\";\r\n\r\nclass OrdersPageForPhAdmin extends Component {\r\n\tstate = {\r\n        orders: [],\r\n        pharmacyId:'',\r\n        hiddenSuccessAlert: true,\r\n\t\tsuccessHeader: \"\",\r\n\t\tsuccessMessage: \"\",\r\n\t\thiddenFailAlert: true,\r\n\t\tfailHeader: \"\",\r\n\t\tfailMessage: \"\",\r\n        offers:[],        \r\n        showOffersModal: false,\r\n        selectedOrder:'',\r\n        drugsToAdd:[],\r\n        addedDrugs:[],\r\n        showEditOrder:false,\r\n        drugs:[],\r\n        showingSorted:false,\r\n        drugsFromOrder:[],\r\n        drugsForAdd:[],\r\n        orderToEdit:'',\r\n    };\r\n\r\n    componentDidMount() {\r\n\t\tlet pharmacyId=localStorage.getItem(\"keyPharmacyId\")\r\n\t\tthis.setState({\r\n\t\t\tpharmacyId: pharmacyId\r\n\t\t})\r\n        Axios.get(API_URL + \"/order/getAllOrdersForPharmacy/\" + localStorage.getItem(\"keyPharmacyId\"), {\r\n\t\t\theaders: { Authorization: GetAuthorisation() },\r\n\t\t})\r\n\r\n\t\t\t.then((res) => {\r\n\t\t\t\tconsole.log(res.data);\r\n\t\t\t\tthis.setState({ orders: res.data });\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t});\r\n\r\n    }\r\n\r\n    removeOrderClick = id => {\r\n    /*    confirmAlert({\r\n            message: 'Are you sure to remove order?',\r\n            buttons: [\r\n              {\r\n                label: 'Yes',\r\n                onClick: () => {\r\n                    let EntityIdDTO = {\r\n                        id: id \r\n                    };\r\n\r\n                    Axios\r\n                    .put(BASE_URL + \"/api/order/remove-order-from-pharmacy\", EntityIdDTO, {\r\n                        validateStatus: () => true,\r\n                        headers: { Authorization: getAuthHeader() },\r\n                    }).then((res) =>{\r\n                        if (res.status === 200) {\r\n                            this.setState({\r\n                                hiddenSuccessAlert: false,\r\n                                hiddenFailAlert:true,\r\n                                successHeader: \"Success\",\r\n                                successMessage: \"You successfully delete order.\",\r\n                            })\r\n                            this.updateOrders();\r\n                        }else if(res.status === 400)\r\n                        {\r\n                            this.setState({\r\n                                hiddenSuccessAlert: true,\r\n                                hiddenFailAlert:false,\r\n                                failHeader: \"Unsuccess\", \r\n                                failMessage: \"Not possible to remove order because have offers\"\r\n                            })\r\n                        }else if(res.status === 500)\r\n                        {\r\n                            this.setState({\r\n                                hiddenSuccessAlert: true,\r\n                                hiddenFailAlert:false,\r\n                                failHeader: \"Unsuccess\", \r\n                                failMessage: \"We have some problem. Try later.\"\r\n                            })\r\n                        }\r\n                        \r\n                    }).catch(() => {\r\n\r\n                    });\r\n                }\r\n              },\r\n              {\r\n                label: 'No',\r\n                onClick: () => {\r\n                    \r\n                }\r\n              }\r\n            ]\r\n        });*/\r\n    }\r\n\r\n    updateOrders = () =>{\r\n      /*  Axios\r\n        .get(BASE_URL + \"/api/order/find-orders-for-pharmacy?pharmacyId=\"+ this.state.pharmacyId, {\r\n\t\t\theaders: { Authorization: getAuthHeader() },\r\n\t\t}).then((res) =>{\r\n            this.setState({orders : res.data});\r\n            console.log(res.data);\r\n        }).catch((err) => {console.log(err);});*/\r\n    }\r\n\r\n    \r\n    handleCloseAlertSuccess = () => {\r\n\t\tthis.setState({ hiddenSuccessAlert: true });\r\n    };\r\n    \r\n    handleCloseAlertFail = () => {\r\n\t\tthis.setState({ hiddenFailAlert: true });\r\n\t};\r\n\r\n    handleCloseOffersModal =()=>{\r\n        this.setState({ showOffersModal: false });\r\n\r\n    }\r\n\r\n    onViewOrdersClick = (id,num) => {\r\n      /*  if(num===0){\r\n            this.setState({\r\n                hiddenSuccessAlert: true,\r\n                hiddenFailAlert:false,\r\n                failHeader: \"Unsuccess\", \r\n                failMessage: \"There are currently no offers\"\r\n            })\r\n        }else{\r\n            Axios\r\n            .get(BASE_URL + \"/api/offer/offers-for-order?orderId=\"+ id, {\r\n                validateStatus: () => true,\r\n                headers: { Authorization: getAuthHeader() },\r\n            }).then((res) =>{\r\n                if(res.status ===200){\r\n                    this.setState({\r\n                        offers : res.data,\r\n                        showOffersModal:true,\r\n                        selectedOrder:id\r\n                    });\r\n                }\r\n                if(res.status === 400)\r\n                {\r\n                    this.setState({\r\n                        hiddenSuccessAlert: true,\r\n                        hiddenFailAlert:false,\r\n                        failHeader: \"Unsuccess\", \r\n                        failMessage: \"The order has been processed\"\r\n                    })\r\n                }else if(res.status === 500)\r\n                {\r\n                    this.setState({\r\n                        hiddenSuccessAlert: true,\r\n                        hiddenFailAlert:false,\r\n                        failHeader: \"Unsuccess\", \r\n                        failMessage: \"We have some problem. Try later.\"\r\n                    })\r\n                }\r\n                console.log(res.data);\r\n            }).catch((err) => {console.log(err);});    \r\n        }*/\r\n    }\r\n\r\n    addItem = item => {\r\n\r\n        this.setState({\r\n            drugsFromOrder: [\r\n            ...this.state.drugsFromOrder,\r\n            item \r\n          ]\r\n        })\r\n    }\r\n\r\n    removePeople(e) {\r\n        var array = [...this.state.drugsForAdd]; // make a separate copy of the array\r\n        var index = array.indexOf(e)\r\n        if (index !== -1) {\r\n          array.splice(index, 1);\r\n          this.setState({drugsForAdd: array});\r\n        }\r\n      }\r\n\r\n    handleRemoveFromDrugToAdd = (drug) =>{\r\n        this.removePeople(drug)\r\n     }\r\n\r\n     handleAddToAddedDrugs = (drug) =>{\r\n        this.addItem(drug);\r\n     }\r\n\r\n    onEditOrderClick = (order,num) =>{\r\n\r\n    /*    if(num!==0){\r\n            this.setState({\r\n                hiddenSuccessAlert: true,\r\n                hiddenFailAlert:false,\r\n                failHeader: \"Unsuccess\", \r\n                failMessage: \"Not possible to remove order because have offers\"\r\n            })\r\n        }else{\r\n            Axios\r\n            .get(BASE_URL + \"/api/order/find-drugs-by-order?orderId=\"+ order.Id, {\r\n                headers: { Authorization: getAuthHeader() },\r\n            }).then((res) =>{\r\n                this.setState({drugsFromOrder : res.data});\r\n                console.log(res.data);\r\n            }).catch((err) => {console.log(err);});\r\n    \r\n            Axios\r\n            .get(BASE_URL + \"/api/order/find-drugs-by-order-to-add?orderId=\"+ order.Id, {\r\n                headers: { Authorization: getAuthHeader() },\r\n            }).then((res) =>{\r\n                this.setState({drugsForAdd : res.data});\r\n                console.log(res.data);\r\n            }).catch((err) => {console.log(err);});\r\n    \r\n    \r\n            this.setState({\r\n                orderToEdit: order.Id,\r\n                showEditOrder:true,\r\n            })\r\n        }\r\n    }\r\n\r\n    handleAcceptOffer = () =>{\r\n        this.setState({\r\n            hiddenSuccessAlert: false,\r\n            hiddenFailAlert:true,\r\n            successHeader: \"Success\",\r\n            successMessage: \"You successfully accept offer.\",\r\n            showOffersModal:false\r\n        })\r\n        this.updateOrders();\r\n    }\r\n\r\n    handleResetFilter = () =>{\r\n        Axios\r\n        .get(BASE_URL + \"/api/order/find-orders-for-pharmacy?pharmacyId=\"+ this.state.pharmacyId, {\r\n\t\t\theaders: { Authorization: getAuthHeader() },\r\n\t\t}).then((res) =>{\r\n            this.setState({orders : res.data,showingSorted:false});\r\n            console.log(res.data);\r\n        }).catch((err) => {console.log(err);});\r\n    }\r\n\r\n    handleFilterOrderPerCreated = () =>{\r\n        Axios\r\n        .get(BASE_URL + \"/api/order/find-created-orders-for-pharmacy?pharmacyId=\"+ this.state.pharmacyId, {\r\n\t\t\theaders: { Authorization: getAuthHeader() },\r\n\t\t}).then((res) =>{\r\n            this.setState({orders : res.data,showingSorted:true});\r\n            console.log(res.data);\r\n        }).catch((err) => {console.log(err);});\r\n    }\r\n\r\n    handleFilterOrderPerProccessed = () =>{\r\n        Axios\r\n        .get(BASE_URL + \"/api/order/find-processed-orders-for-pharmacy?pharmacyId=\"+ this.state.pharmacyId, {\r\n\t\t\theaders: { Authorization: getAuthHeader() },\r\n\t\t}).then((res) =>{\r\n            this.setState({orders : res.data,showingSorted:true});\r\n            console.log(res.data);\r\n        }).catch((err) => {console.log(err);});*/\r\n    }\r\n\r\n    handleEditOrderModalClose = () =>{\r\n        this.setState({\r\n            showEditOrder:false\r\n        })\r\n    }\r\n\r\n    render() {\r\n\t\treturn (\r\n        <React.Fragment>\r\n            <div>\r\n\r\n            </div>\r\n                    <Header />\r\n                \r\n\t\t\t\t\t<div className=\"container\" style={{ marginTop: \"2%\" }}>\r\n\t\t\t\t\t<h5 className=\" text-center mb-0 mt-2 text-uppercase\">Orders </h5>\r\n\r\n\t\t\t\t\t<table className=\"table table-hover\" style={{ width: \"100%\", marginTop: \"3rem\" }}>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t{this.state.orders.map((order) => (\r\n\t\t\t\t\t\t\t\t<tr className=\"rounded\">\r\n\t\t\t\t\t\t\t\t\t<td width=\"190em\">\r\n\t\t\t\t\t\t\t\t\t\t<img className=\"img-fluid\" src={orderImage}  width=\"150em\" />\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<b>Date : </b>{\" \"}\r\n\t\t\t\t\t\t\t\t\t\t\t{new Date(order.EntityDTO.dateTo).toLocaleTimeString(\"en-US\", {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tday: \"2-digit\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tmonth: \"2-digit\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tyear: \"numeric\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\thour: \"2-digit\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tminute: \"2-digit\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<b>Creator: </b> {order.EntityDTO.creator}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\r\n                                        <div>\r\n\t\t\t\t\t\t\t\t\t\t\t<b>Offers: </b> {order.EntityDTO.offersCount}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\r\n                                        <div>\r\n\t\t\t\t\t\t\t\t\t\t\t<b>Status: </b> {order.EntityDTO.orderStatus}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td className=\"align-middle\">\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"mt-2\" >\r\n\t\t\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => this.handleOfferClick(order)}\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline-secondary\"\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\tCreate an offer\r\n\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\r\n\t\t\t\t</div>\r\n                    \r\n                </React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default OrdersPageForPhAdmin"]},"metadata":{},"sourceType":"module"}