{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stefan\\\\Desktop\\\\ISA-projekat\\\\ISA-projekat\\\\ISA-front\\\\src\\\\Pages\\\\DermatologistFreeAppointment.js\";\nimport React, { Component } from \"react\";\nimport Axios from \"axios\";\nimport Header from '../Components/Header';\nimport { withRouter } from \"react-router\";\nimport { Redirect } from \"react-router-dom\";\nimport GetAuthorisation from \"../Funciton/GetAuthorisation\";\nimport FreeDermatologistAppointmentPicture from \"../Images/appointment.png\";\nimport UnsuccessfulAlert from \"../Components/Alerts/UnsuccessfulAlert\";\nimport SuccessfulAlert from \"../Components/Alerts/SuccessfulAlert\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8080\";\n\nclass DermatologistFreeAppointment extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      pharmacyId: \"\",\n      appointments: [],\n      hiddenSuccessfulAlert: true,\n      successfulHeader: \"\",\n      successfulMessage: \"\",\n      hiddenUnsuccessfulAlert: true,\n      UnsuccessfulHeader: \"\",\n      UnsuccessfulMessage: \"\"\n    };\n\n    this.setPharmacyIdFromUrl = id => {\n      this.setState({\n        pharmacyId: id\n      });\n    };\n\n    this.hasRole = requestRole => {\n      let currentRoles = JSON.parse(localStorage.getItem(\"keyRole\"));\n      if (currentRoles === null) return false;\n\n      for (let currentRole of currentRoles) {\n        if (currentRole === requestRole) return true;\n      }\n\n      return false;\n    };\n\n    this.handleCloseSuccessfulAlert = () => {\n      this.setState({\n        hiddenSuccessfulAlert: true\n      });\n    };\n\n    this.handleCloseUnsuccessfulAlert = () => {\n      this.setState({\n        hiddenUnsuccessfulAlert: true\n      });\n    };\n\n    this.scheduleSelectedAppointment = appointmentId => {\n      let appointmentIdObject = {\n        id: appointmentId\n      };\n      Axios.post(API_URL + \"/appointment/dermatologist/reserveFreeDermatologistAppointment\", appointmentIdObject, {\n        validateStatus: () => true,\n        headers: {\n          Authorization: GetAuthorisation()\n        }\n      }).then(res => {\n        if (res.status === 400) {\n          this.setState({\n            hiddenUnsuccessfulAlert: false,\n            UnsuccessfulHeader: \"Bad request\",\n            UnsuccessfulMessage: \"Invalid argument.\"\n          });\n        } else if (res.status === 500) {\n          this.setState({\n            hiddenUnsuccessfulAlert: false,\n            UnsuccessfulHeader: \"Internal server error\",\n            UnsuccessfulMessage: \"Server error.\"\n          });\n        } else if (res.status === 200) {\n          console.log(\"Success\");\n          this.setState({\n            hiddenSuccessfulAlert: false,\n            successfulHeader: \"Success\",\n            successfulMessage: \"You have successfully scheduled the desired appointment! \",\n            hiddenEditInfo: true\n          });\n          this.refreshAppointments();\n        }\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          hiddenUnsuccessfulAlert: false,\n          UnsuccessfulHeader: \"Error\",\n          UnsuccessfulMessage: \"Something was wrong\"\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (!this.hasRole(\"ROLE_PATIENT\")) {\n      this.props.history.push('/login');\n    }\n\n    const pathParams = window.location.pathname;\n    const paramsList = pathParams.split(\"/\");\n    const id = paramsList[2];\n    console.log(id);\n    this.setPharmacyIdFromUrl(id);\n    Axios.get(API_URL + \"/appointment/dermatologist/allAppointmentsForchosenPharmacy/\" + id, {\n      validateStatus: () => true,\n      headers: {\n        Authorization: GetAuthorisation()\n      }\n    }).then(res => {\n      if (res.status === 401) {\n        this.props.history.push('/login');\n      } else {\n        this.setState({\n          appointments: res.data\n        });\n        console.log(res.data);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  refreshAppointments() {\n    let newAppointmentsList = [];\n\n    for (let appointment of this.state.appointments) {\n      if (appointment.Id !== appointmentId) newAppointmentsList.push(appointment);\n    }\n\n    this.setState({\n      appointments: newAppointmentsList\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          hidden: this.state.appointments.length === 0,\n          className: \"text-center  mt-3  \",\n          children: \"Please select appointment from the list!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          hidden: this.state.appointments.length !== 0,\n          className: \"text-center  mt-3 text-danger\",\n          children: \"Sorry, we don't have free dermatologist appointments for selected pharmacy!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(SuccessfulAlert, {\n          hidden: this.state.hiddenSuccessfulAlert,\n          header: this.state.successfulHeader,\n          message: this.state.successfulMessage,\n          handleCloseAlert: this.handleCloseSuccessfulAlert\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(UnsuccessfulAlert, {\n          hidden: this.state.hiddenUnsuccessfulAlert,\n          header: this.state.UnsuccessfulHeader,\n          message: this.state.UnsuccessfulMessage,\n          handleCloseAlert: this.handleCloseUnsuccessfulAlert\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"table table-hover\",\n            style: {\n              width: \"70%\",\n              marginTop: \"5em\",\n              marginLeft: \"auto\",\n              marginRight: \"auto\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: this.state.appointments.map(appointment => /*#__PURE__*/_jsxDEV(\"tr\", {\n                id: appointment.Id,\n                onClick: () => this.scheduleSelectedAppointment(appointment.Id),\n                style: {\n                  cursor: \"pointer\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  width: \"100px\",\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: FreeDermatologistAppointmentPicture,\n                    style: {\n                      width: \"85px\",\n                      marginTop: \"15px\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 208,\n                    columnNumber: 22\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 207,\n                  columnNumber: 20\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                      children: \"Date: \"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 214,\n                      columnNumber: 12\n                    }, this), \" \", new Date(appointment.EntityDTO.startDateTime).toLocaleDateString(\"en-US\", {\n                      day: \"2-digit\",\n                      month: \"2-digit\",\n                      year: \"numeric\"\n                    })]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 213,\n                    columnNumber: 11\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                      children: \"Start time: \"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 222,\n                      columnNumber: 12\n                    }, this), \" \", new Date(appointment.EntityDTO.startDateTime).toLocaleTimeString(\"en-US\", {\n                      hour: \"2-digit\",\n                      minute: \"2-digit\"\n                    })]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 221,\n                    columnNumber: 11\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                      children: \"End time: \"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 229,\n                      columnNumber: 12\n                    }, this), \" \", new Date(appointment.EntityDTO.endDateTime).toLocaleTimeString(\"en-US\", {\n                      hour: \"2-digit\",\n                      minute: \"2-digit\"\n                    })]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 228,\n                    columnNumber: 11\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                      children: \"Price:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 236,\n                      columnNumber: 12\n                    }, this), \" \", appointment.EntityDTO.price, /*#__PURE__*/_jsxDEV(\"b\", {\n                      children: \"  din\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 238,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 235,\n                    columnNumber: 11\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                      children: \"Dermatologist: \"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 243,\n                      columnNumber: 12\n                    }, this), \" \", appointment.EntityDTO.employee.EntityDTO.name + \" \" + appointment.EntityDTO.employee.EntityDTO.surname]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 242,\n                    columnNumber: 11\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 10\n                }, this)]\n              }, appointment.Id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 9\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 7\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(DermatologistFreeAppointment);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["C:/Users/stefan/Desktop/ISA-projekat/ISA-projekat/ISA-front/src/Pages/DermatologistFreeAppointment.js"],"names":["React","Component","Axios","Header","withRouter","Redirect","GetAuthorisation","FreeDermatologistAppointmentPicture","UnsuccessfulAlert","SuccessfulAlert","API_URL","DermatologistFreeAppointment","state","pharmacyId","appointments","hiddenSuccessfulAlert","successfulHeader","successfulMessage","hiddenUnsuccessfulAlert","UnsuccessfulHeader","UnsuccessfulMessage","setPharmacyIdFromUrl","id","setState","hasRole","requestRole","currentRoles","JSON","parse","localStorage","getItem","currentRole","handleCloseSuccessfulAlert","handleCloseUnsuccessfulAlert","scheduleSelectedAppointment","appointmentId","appointmentIdObject","post","validateStatus","headers","Authorization","then","res","status","console","log","hiddenEditInfo","refreshAppointments","catch","err","componentDidMount","props","history","push","pathParams","window","location","pathname","paramsList","split","get","data","newAppointmentsList","appointment","Id","render","length","width","marginTop","marginLeft","marginRight","map","cursor","Date","EntityDTO","startDateTime","toLocaleDateString","day","month","year","toLocaleTimeString","hour","minute","endDateTime","price","employee","name","surname"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Axios from \"axios\";\r\nimport Header from '../Components/Header';\r\nimport { withRouter } from \"react-router\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport GetAuthorisation from \"../Funciton/GetAuthorisation\";\r\nimport FreeDermatologistAppointmentPicture from \"../Images/appointment.png\" ;\r\nimport UnsuccessfulAlert from \"../Components/Alerts/UnsuccessfulAlert\";\r\nimport SuccessfulAlert from \"../Components/Alerts/SuccessfulAlert\";\r\n\r\nconst API_URL=\"http://localhost:8080\";\r\n\r\nclass DermatologistFreeAppointment extends Component {\r\n\t\r\n  \r\n    \r\n    state = {\r\n        \r\n        pharmacyId: \"\",\r\n        appointments : [],\r\n        hiddenSuccessfulAlert: true,\r\n        successfulHeader: \"\",\r\n        successfulMessage: \"\",\r\n        hiddenUnsuccessfulAlert: true,\r\n        UnsuccessfulHeader: \"\",\r\n        UnsuccessfulMessage: \"\",\r\n\r\n\r\n\r\n    };\r\n\r\n  \r\n  \r\n\r\n  setPharmacyIdFromUrl = (id) => {\r\n        \r\n    this.setState({\r\n    \r\n        pharmacyId : id\r\n      });\r\n\r\n\r\n    };\r\n\r\n  componentDidMount() {\r\n\r\n    if (!this.hasRole(\"ROLE_PATIENT\")) {\r\n\t\t\tthis.props.history.push('/login');\r\n    }\r\n\r\n\r\n\r\n    const pathParams= window.location.pathname;\r\n    const paramsList= pathParams.split(\"/\");\r\n    const id = paramsList[2];\r\n\r\n    console.log(id);\r\n\r\n    this.setPharmacyIdFromUrl(id);\r\n      \r\n    Axios.get(API_URL + \"/appointment/dermatologist/allAppointmentsForchosenPharmacy/\" + id, {\r\n\t\t\tvalidateStatus: () => true,\r\n\t\t\theaders: { Authorization: GetAuthorisation() },\r\n\t\t})\r\n\t\t\t.then((res) => {\r\n\t\t\t\tif (res.status === 401) {\r\n          this.props.history.push('/login');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.setState({ appointments: res.data });\r\n\t\t\t\t\tconsole.log(res.data);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t});\r\n\t}\r\n      \r\n\r\n  hasRole = (requestRole) => {\r\n    let currentRoles = JSON.parse(localStorage.getItem(\"keyRole\"));\r\n\r\n    if (currentRoles === null) return false;\r\n\r\n\r\n    for (let currentRole of currentRoles) {\r\n      if (currentRole === requestRole) return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n\r\n  handleCloseSuccessfulAlert = () => {\r\n\t\tthis.setState({ hiddenSuccessfulAlert: true });\r\n\t};\r\n\r\n\thandleCloseUnsuccessfulAlert= () => {\r\n\t\tthis.setState({ hiddenUnsuccessfulAlert: true });\r\n\t};\r\n\r\n\r\n\r\n\r\n  scheduleSelectedAppointment = (appointmentId) => {\r\n  \r\n    let appointmentIdObject = { id: appointmentId};\r\n\r\n    Axios.post(API_URL + \"/appointment/dermatologist/reserveFreeDermatologistAppointment\",appointmentIdObject , {\r\n\t\t\tvalidateStatus: () => true,\r\n\t\t\theaders: { Authorization: GetAuthorisation() },\r\n\t\t})\r\n      .then((res) => {\r\n        if (res.status === 400) {\r\n          this.setState({ hiddenUnsuccessfulAlert: false,\r\n            UnsuccessfulHeader: \"Bad request\", \r\n            UnsuccessfulMessage: \"Invalid argument.\" });\r\n\r\n        } else if (res.status === 500) {\r\n\r\n          this.setState({ hiddenUnsuccessfulAlert: false, \r\n            UnsuccessfulHeader: \"Internal server error\", \r\n            UnsuccessfulMessage: \"Server error.\" });\r\n\r\n        } else if (res.status === 200) {\r\n          console.log(\"Success\");\r\n          this.setState({\r\n            hiddenSuccessfulAlert: false,\r\n            successfulHeader: \"Success\",\r\n            successfulMessage: \"You have successfully scheduled the desired appointment! \",\r\n            hiddenEditInfo: true,\r\n          });\r\n\r\n          this.refreshAppointments();\r\n\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        this.setState({ hiddenUnsuccessfulAlert: false,\r\n          UnsuccessfulHeader: \"Error\", \r\n          UnsuccessfulMessage: \"Something was wrong\" });\r\n      \r\n      });\r\n\r\n\r\n\r\n  }\r\n\r\n  refreshAppointments(){\r\n\r\n    let newAppointmentsList= [];\r\n    for (let appointment of this.state.appointments) {\r\n      if (appointment.Id !== appointmentId) \r\n          newAppointmentsList.push(appointment)\r\n    }\r\n\r\n    this.setState({\r\n     appointments : newAppointmentsList,\r\n    });\r\n\r\n  }\r\n\r\n\r\n\trender() {\r\n\t\r\n\r\n\t\treturn (\r\n      \r\n      <React.Fragment>\r\n\r\n      <Header/>\r\n      \r\n         <div className=\"container\">\r\n\r\n\r\n         <h1 hidden={this.state.appointments.length === 0} className=\"text-center  mt-3  \" >Please select appointment from the list!</h1>\r\n         <h1 hidden={this.state.appointments.length !== 0} className=\"text-center  mt-3 text-danger\"  >Sorry, we don't have free dermatologist appointments for selected pharmacy!</h1>\r\n\r\n\r\n\r\n         <SuccessfulAlert\r\n\t\t\t\t\t\thidden={this.state.hiddenSuccessfulAlert}\r\n\t\t\t\t\t\theader={this.state.successfulHeader}\r\n\t\t\t\t\t\tmessage={this.state.successfulMessage}\r\n\t\t\t\t\t\thandleCloseAlert={this.handleCloseSuccessfulAlert}    \r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<UnsuccessfulAlert\r\n\t\t\t\t\t\thidden={this.state.hiddenUnsuccessfulAlert}\r\n\t\t\t\t\t\theader={this.state.UnsuccessfulHeader}\r\n\t\t\t\t\t\tmessage={this.state.UnsuccessfulMessage}\r\n\t\t\t\t\t\thandleCloseAlert={this.handleCloseUnsuccessfulAlert}\r\n\t\t\t\t\t/>\r\n\r\n\r\n\r\n        <div className=\"container\">\r\n                    \r\n          <table className=\"table table-hover\" style={{ width: \"70%\", marginTop: \"5em\", marginLeft: \"auto\",marginRight: \"auto\" }}>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t{this.state.appointments.map((appointment) => (\r\n\t\t\t\t\t\t\t\t<tr\r\n\t\t\t\t\t\t\t\t\tid={appointment.Id}\r\n\t\t\t\t\t\t\t\t\tkey={appointment.Id}\r\n\t\t\t\t\t\t\t\t\tonClick={() => this.scheduleSelectedAppointment(appointment.Id)}\r\n\t\t\t\t\t\t\t\t\tstyle={{ cursor: \"pointer\" }}\r\n\t\t\t\t\t\t\t\t>\r\n\r\n                   <td width=\"100px\">  \r\n                     <img  src={FreeDermatologistAppointmentPicture} style={{ width: \"85px\", marginTop: \"15px\" }}></img>                                 \r\n                                    \r\n                    </td>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<b>Date: </b>{\" \"}\r\n\t\t\t\t\t\t\t\t\t\t\t{new Date(appointment.EntityDTO.startDateTime).toLocaleDateString(\"en-US\", {\r\n\t\t\t\t\t\t\t\t\t\t\t\tday: \"2-digit\",\r\n\t\t\t\t\t\t\t\t\t\t\t\tmonth: \"2-digit\",\r\n\t\t\t\t\t\t\t\t\t\t\t\tyear: \"numeric\",\r\n\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<b>Start time: </b>{\" \"}\r\n\t\t\t\t\t\t\t\t\t\t\t{new Date(appointment.EntityDTO.startDateTime).toLocaleTimeString(\"en-US\", {\r\n\t\t\t\t\t\t\t\t\t\t\t\thour: \"2-digit\",\r\n\t\t\t\t\t\t\t\t\t\t\t\tminute: \"2-digit\",\r\n\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<b>End time: </b>{\" \"}\r\n\t\t\t\t\t\t\t\t\t\t\t{new Date(appointment.EntityDTO.endDateTime).toLocaleTimeString(\"en-US\", {\r\n\t\t\t\t\t\t\t\t\t\t\t\thour: \"2-digit\",\r\n\t\t\t\t\t\t\t\t\t\t\t\tminute: \"2-digit\",\r\n\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<b>Price:</b>{\" \"}\r\n                      {appointment.EntityDTO.price }\r\n                      <b>  din</b>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\r\n                  \r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t<b>Dermatologist: </b>{\" \"}\r\n\t\t\t\t\t\t\t\t\t\t\t{appointment.EntityDTO.employee.EntityDTO.name + \" \" + appointment.EntityDTO.employee.EntityDTO.surname}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n                </div>\r\n\r\n\r\n\r\n          \r\n        </div>\r\n        </React.Fragment>\r\n        \r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withRouter(DermatologistFreeAppointment);"]},"metadata":{},"sourceType":"module"}