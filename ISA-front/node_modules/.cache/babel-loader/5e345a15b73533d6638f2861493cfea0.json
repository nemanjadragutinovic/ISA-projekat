{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\neman\\\\OneDrive\\\\Radna povr\\u0161ina\\\\isa projekat\\\\ISA-projekat\\\\ISA-front\\\\src\\\\Components\\\\LoginPage.js\";\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport Axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport ChangePasswordModal from './Modal/ChangePasswordModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LoginPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      errorHeader: \"\",\n      errorMessage: \"\",\n      hiddenErrorAlert: true,\n      email: \"\",\n      password: \"\",\n      redirect: false,\n      emailError: \"none\",\n      passwordError: \"none\",\n      openPasswordModal: false,\n      oldPasswordEmptyError: \"none\",\n      newPasswordEmptyError: \"none\",\n      newPasswordRetypeEmptyError: \"none\",\n      newPasswordRetypeNotSameError: \"none\",\n      errorPasswordHeader: \"\",\n      errorPasswordMessage: \"\",\n      hiddenPasswordErrorAlert: true\n    };\n\n    this.handleEmailChange = event => {\n      this.setState({\n        email: event.target.value\n      });\n    };\n\n    this.handlePasswordChange = event => {\n      this.setState({\n        password: event.target.value\n      });\n    };\n\n    this.handlePasswordModalClose = () => {\n      this.setState({\n        openPasswordModal: false\n      });\n    };\n\n    this.changePassword = (oldPassword, newPassword, newPasswordRetype) => {\n      console.log(oldPassword, newPassword, newPasswordRetype);\n      this.setState({\n        hiddenPasswordErrorAlert: true,\n        errorPasswordHeader: \"\",\n        errorPasswordMessage: \"\",\n        hiddenEditInfo: true,\n        oldPasswordEmptyError: \"none\",\n        newPasswordEmptyError: \"none\",\n        newPasswordRetypeEmptyError: \"none\",\n        newPasswordRetypeNotSameError: \"none\",\n        hiddenSuccessAlert: true,\n        successHeader: \"\",\n        successMessage: \"\"\n      });\n    };\n\n    this.handleCloseAlertPassword = () => {\n      this.setState({\n        hiddenPasswordErrorAlert: true\n      });\n    };\n\n    this.handleLogin = () => {\n      let loginDTO = {\n        username: this.state.email,\n        password: this.state.password\n      };\n      console.log(loginDTO);\n      Axios.post(\"http://localhost:8080/auth/login\", loginDTO, {\n        validateStatus: () => true\n      }).then(res => {\n        if (res.status === 401) {\n          this.setState({\n            errorHeader: \"Bad credentials!\"\n          });\n        } else if (res.status === 500) {\n          this.setState({\n            errorHeader: \"Internal server error!\"\n          });\n        } else if (res.status === 302) {\n          this.setState({\n            openPasswordModal: true\n          });\n        } else {\n          console.log(res.data);\n          localStorage.setItem(\"keyToken\", res.data.accessToken);\n          localStorage.setItem(\"keyRole\", JSON.stringify(res.data.roles));\n          localStorage.setItem(\"expireTime\", new Date(new Date().getTime() + res.data.expiresIn).getTime());\n          console.log(res.data.roles);\n          this.setState({\n            redirect: true\n          });\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.changePassword = (oldPassword, newPassword, newPasswordRetype) => {\n      console.log(oldPassword, newPassword, newPasswordRetype);\n      this.setState({\n        hiddenPasswordErrorAlert: true,\n        errorPasswordHeader: \"\",\n        errorPasswordMessage: \"\",\n        hiddenEditInfo: true,\n        oldPasswordEmptyError: \"none\",\n        newPasswordEmptyError: \"none\",\n        newPasswordRetypeEmptyError: \"none\",\n        newPasswordRetypeNotSameError: \"none\",\n        hiddenSuccessAlert: true,\n        successHeader: \"\",\n        successMessage: \"\"\n      });\n\n      if (oldPassword === \"\") {\n        this.setState({\n          oldPasswordEmptyError: \"initial\"\n        });\n      } else if (newPassword === \"\") {\n        this.setState({\n          newPasswordEmptyError: \"initial\"\n        });\n      } else if (newPasswordRetype === \"\") {\n        this.setState({\n          newPasswordRetypeEmptyError: \"initial\"\n        });\n      } else if (newPasswordRetype !== newPassword) {\n        this.setState({\n          newPasswordRetypeNotSameError: \"initial\"\n        });\n      } else {\n        let passwordChangeDTO = {\n          oldPassword,\n          newPassword\n        };\n        Axios.post(BASE_URL + \"/auth/change-first-password\", passwordChangeDTO, {\n          validateStatus: () => true\n        }).then(res => {\n          if (res.status === 403) {\n            this.setState({\n              hiddenPasswordErrorAlert: false,\n              errorPasswordHeader: \"Bad credentials\",\n              errorPasswordMessage: \"You entered wrong password.\"\n            });\n          } else if (res.status === 400) {\n            this.setState({\n              hiddenPasswordErrorAlert: false,\n              errorPasswordHeader: \"Invalid new password\",\n              errorPasswordMessage: \"Invalid new password.\"\n            });\n          } else if (res.status === 500) {\n            this.setState({\n              hiddenPasswordErrorAlert: false,\n              errorPasswordHeader: \"Internal server error\",\n              errorPasswordMessage: \"Server error.\"\n            });\n          } else if (res.status === 204) {\n            this.setState({\n              hiddenSuccessAlert: false,\n              successHeader: \"Success\",\n              successMessage: \"You successfully changed your password.\",\n              openPasswordModal: false\n            });\n          }\n\n          console.log(res);\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    };\n  }\n\n  render() {\n    if (this.state.redirect) return /*#__PURE__*/_jsxDEV(Redirect, {\n      push: true,\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 41\n    }, this);\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \" text-center  mb-0 text-uppercase\",\n        style: {\n          marginTop: \"2rem\"\n        },\n        children: \"Login to Health Clinic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container\",\n        style: {\n          maxWidth: \"40%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                textAlign: \"start !important\"\n              },\n              for: \"exampleInputEmail1\",\n              children: \"Email address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              onChange: this.handleEmailChange,\n              value: this.state.email,\n              class: \"form-control\",\n              id: \"emailAddress\",\n              \"aria-describedby\": \"emailHelp\",\n              placeholder: \"Email address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              for: \"exampleInputPassword1\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"Password\",\n              onChange: this.handlePasswordChange,\n              value: this.state.name,\n              class: \"form-control\",\n              id: \"password\",\n              placeholder: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"text-center\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              class: \"btn btn-primary \",\n              style: {\n                width: \"20%\"\n              },\n              onClick: this.handleLogin,\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(ChangePasswordModal, {\n        handleCloseAlertPassword: this.handleCloseAlertPassword,\n        hiddenPasswordErrorAlert: this.state.hiddenPasswordErrorAlert,\n        errorPasswordHeader: this.state.errorPasswordHeader,\n        errorPasswordMessage: this.state.errorPasswordMessage,\n        oldPasswordEmptyError: this.state.oldPasswordEmptyError,\n        newPasswordEmptyError: this.state.newPasswordEmptyError,\n        newPasswordRetypeEmptyError: this.state.newPasswordRetypeEmptyError,\n        newPasswordRetypeNotSameError: this.state.newPasswordRetypeNotSameError,\n        show: this.state.openPasswordModal,\n        changePassword: this.changePassword,\n        onCloseModal: this.handlePasswordModalClose,\n        header: \"Change password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default LoginPage;","map":{"version":3,"sources":["C:/Users/neman/OneDrive/Radna površina/isa projekat/ISA-projekat/ISA-front/src/Components/LoginPage.js"],"names":["Header","React","Component","Axios","Redirect","ChangePasswordModal","LoginPage","state","errorHeader","errorMessage","hiddenErrorAlert","email","password","redirect","emailError","passwordError","openPasswordModal","oldPasswordEmptyError","newPasswordEmptyError","newPasswordRetypeEmptyError","newPasswordRetypeNotSameError","errorPasswordHeader","errorPasswordMessage","hiddenPasswordErrorAlert","handleEmailChange","event","setState","target","value","handlePasswordChange","handlePasswordModalClose","changePassword","oldPassword","newPassword","newPasswordRetype","console","log","hiddenEditInfo","hiddenSuccessAlert","successHeader","successMessage","handleCloseAlertPassword","handleLogin","loginDTO","username","post","validateStatus","then","res","status","data","localStorage","setItem","accessToken","JSON","stringify","roles","Date","getTime","expiresIn","catch","err","passwordChangeDTO","BASE_URL","render","marginTop","maxWidth","textAlign","name","width"],"mappings":"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","sourcesContent":["import Header from './Header';\r\nimport React, { Component } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ChangePasswordModal from './Modal/ChangePasswordModal';\r\n\r\nclass LoginPage extends Component {\r\n\r\n    state = {\r\n        errorHeader: \"\",\r\n\t\terrorMessage: \"\",\r\n\t\thiddenErrorAlert: true,\r\n\t\temail: \"\",\r\n\t\tpassword: \"\",\r\n\t\tredirect: false,\r\n\t\temailError: \"none\",\r\n\t\tpasswordError: \"none\",\r\n\t\topenPasswordModal: false,\r\n\t\toldPasswordEmptyError: \"none\",\r\n\t\tnewPasswordEmptyError: \"none\",\r\n\t\tnewPasswordRetypeEmptyError: \"none\",\r\n\t\tnewPasswordRetypeNotSameError: \"none\",\r\n\t\terrorPasswordHeader: \"\",\r\n\t\terrorPasswordMessage: \"\",\r\n\t\thiddenPasswordErrorAlert: true\r\n        \r\n\r\n\r\n\r\n    };\r\n\r\n    handleEmailChange = (event) => {\r\n\t\tthis.setState({ email: event.target.value });\r\n\t};\r\n    handlePasswordChange = (event) => {\r\n\t\tthis.setState({ password: event.target.value });\r\n\t};\r\n    handlePasswordModalClose = () => {\r\n        this.setState({ openPasswordModal: false });\r\n    };\r\n    changePassword = (oldPassword, newPassword, newPasswordRetype) => {\r\n        console.log(oldPassword, newPassword, newPasswordRetype);\r\n    \r\n        this.setState({\r\n            hiddenPasswordErrorAlert: true,\r\n            errorPasswordHeader: \"\",\r\n            errorPasswordMessage: \"\",\r\n            hiddenEditInfo: true,\r\n            oldPasswordEmptyError: \"none\",\r\n            newPasswordEmptyError: \"none\",\r\n            newPasswordRetypeEmptyError: \"none\",\r\n            newPasswordRetypeNotSameError: \"none\",\r\n            hiddenSuccessAlert: true,\r\n            successHeader: \"\",\r\n            successMessage: \"\",\r\n        });\r\n\r\n    }\r\n\r\n    handleCloseAlertPassword = () => {\r\n        this.setState({ hiddenPasswordErrorAlert: true });\r\n    };\r\n\r\n    handleLogin = () => {\r\n        let loginDTO = { username: this.state.email, password: this.state.password };\r\n        console.log(loginDTO);\r\n        Axios.post(\"http://localhost:8080/auth/login\", loginDTO, { validateStatus: () => true })\r\n        .then((res) => {\r\n            if (res.status === 401) {\r\n                this.setState({ errorHeader: \"Bad credentials!\"});\r\n            } else if (res.status === 500) {\r\n                this.setState({ errorHeader: \"Internal server error!\"});\r\n            }else if(res.status === 302){\r\n\r\n                this.setState({ openPasswordModal: true });\r\n            }\r\n            \r\n            else {\r\n                console.log(res.data);\r\n                localStorage.setItem(\"keyToken\", res.data.accessToken);\r\n                localStorage.setItem(\"keyRole\", JSON.stringify(res.data.roles));\r\n                localStorage.setItem(\"expireTime\", new Date(new Date().getTime() + res.data.expiresIn).getTime());\r\n\r\n                console.log(res.data.roles);\r\n\r\n                this.setState({ redirect: true });\r\n            }\r\n        })\r\n        .catch ((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t});\r\n    };\r\n\r\n    changePassword = (oldPassword, newPassword, newPasswordRetype) => {\r\n        console.log(oldPassword, newPassword, newPasswordRetype);\r\n    \r\n        this.setState({\r\n            hiddenPasswordErrorAlert: true,\r\n            errorPasswordHeader: \"\",\r\n            errorPasswordMessage: \"\",\r\n            hiddenEditInfo: true,\r\n            oldPasswordEmptyError: \"none\",\r\n            newPasswordEmptyError: \"none\",\r\n            newPasswordRetypeEmptyError: \"none\",\r\n            newPasswordRetypeNotSameError: \"none\",\r\n            hiddenSuccessAlert: true,\r\n            successHeader: \"\",\r\n            successMessage: \"\",\r\n        });\r\n    \r\n        if (oldPassword === \"\") {\r\n            this.setState({ oldPasswordEmptyError: \"initial\" });\r\n        } else if (newPassword === \"\") {\r\n            this.setState({ newPasswordEmptyError: \"initial\" });\r\n        } else if (newPasswordRetype === \"\") {\r\n            this.setState({ newPasswordRetypeEmptyError: \"initial\" });\r\n        } else if (newPasswordRetype !== newPassword) {\r\n            this.setState({ newPasswordRetypeNotSameError: \"initial\" });\r\n        } else {\r\n            let passwordChangeDTO = { oldPassword, newPassword };\r\n            Axios.post(BASE_URL + \"/auth/change-first-password\", passwordChangeDTO, {\r\n                validateStatus: () => true\r\n            })\r\n                .then((res) => {\r\n                    if (res.status === 403) {\r\n                        this.setState({\r\n                            hiddenPasswordErrorAlert: false,\r\n                            errorPasswordHeader: \"Bad credentials\",\r\n                            errorPasswordMessage: \"You entered wrong password.\",\r\n                        });\r\n                    } else if (res.status === 400) {\r\n                        this.setState({\r\n                            hiddenPasswordErrorAlert: false,\r\n                            errorPasswordHeader: \"Invalid new password\",\r\n                            errorPasswordMessage: \"Invalid new password.\",\r\n                        });\r\n                    } else if (res.status === 500) {\r\n                        this.setState({\r\n                            hiddenPasswordErrorAlert: false,\r\n                            errorPasswordHeader: \"Internal server error\",\r\n                            errorPasswordMessage: \"Server error.\",\r\n                        });\r\n                    } else if (res.status === 204) {\r\n                        this.setState({\r\n                            hiddenSuccessAlert: false,\r\n                            successHeader: \"Success\",\r\n                            successMessage: \"You successfully changed your password.\",\r\n                            openPasswordModal: false,\r\n                        });\r\n                    }\r\n                    console.log(res);\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        if (this.state.redirect) return <Redirect push to=\"/\" />;\r\n        return(\r\n            <React.Fragment>\r\n                <Header/> \r\n\r\n                <h5 className=\" text-center  mb-0 text-uppercase\" style={{ marginTop: \"2rem\" }}>\r\n\t\t\t\t\t\tLogin to Health Clinic\r\n\t\t\t\t</h5>\r\n\r\n               <br/>  \r\n\r\n               <div class=\"container\" style={{maxWidth: \"40%\"}}>\r\n                <form>\r\n                    <div class=\"form-group\">\r\n                        <label style={{textAlign:\"start !important\"}} for=\"exampleInputEmail1\">Email address</label>\r\n                        <input type=\"text\" onChange={this.handleEmailChange} value={this.state.email} class=\"form-control\" id=\"emailAddress\" aria-describedby=\"emailHelp\" placeholder=\"Email address\"/>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"exampleInputPassword1\">Password</label>\r\n                        <input type=\"Password\" onChange={this.handlePasswordChange} value={this.state.name} class=\"form-control\" id=\"password\" placeholder=\"Password\"/>\r\n                    </div>\r\n                    \r\n                    \r\n                    <div class=\"text-center\">\r\n                    <button type=\"button\" class=\"btn btn-primary \" style={{width: \"20%\"}} onClick={this.handleLogin} >Submit</button>\r\n                    </div>\r\n\r\n                </form>\r\n            </div>   \r\n\r\n\r\n\r\n\r\n            <ChangePasswordModal\r\n\t\t\t\thandleCloseAlertPassword={this.handleCloseAlertPassword}\r\n\t\t\t\thiddenPasswordErrorAlert={this.state.hiddenPasswordErrorAlert}\r\n\t\t\t\terrorPasswordHeader={this.state.errorPasswordHeader}\r\n\t\t\t\terrorPasswordMessage={this.state.errorPasswordMessage}\r\n\t\t\t\toldPasswordEmptyError={this.state.oldPasswordEmptyError}\r\n\t\t\t\tnewPasswordEmptyError={this.state.newPasswordEmptyError}\r\n\t\t\t\tnewPasswordRetypeEmptyError={this.state.newPasswordRetypeEmptyError}\r\n\t\t\t\tnewPasswordRetypeNotSameError={this.state.newPasswordRetypeNotSameError}\r\n\t\t\t\tshow={this.state.openPasswordModal}\r\n\t\t\t\tchangePassword={this.changePassword}\r\n\t\t\t\tonCloseModal={this.handlePasswordModalClose}\r\n\t\t\t\theader=\"Change password\"\r\n\t\t\t/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default LoginPage;"]},"metadata":{},"sourceType":"module"}